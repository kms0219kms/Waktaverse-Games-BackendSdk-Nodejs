import createClient from 'openapi-fetch';

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


interface paths {
  "/api/game-link/achieve": {
    /**
     * 도전과제 달성 목록
     * @description 사용자가 달성한 게임 도전과제 목록을 얻습니다.
     */
    get: operations["GameLinkController_getAchieves"];
    /**
     * 도전과제 달성
     * @description 사용자가 게임의 해당 도전과제를 달성했다고 기록합니다.
     */
    post: operations["GameLinkController_postAchieve"];
  };
  "/api/game-link/user/profile": {
    /**
     * 사용자 프로필 정보
     * @description 연동된 게임에서 사용자 기본 정보를 얻습니다.
     */
    get: operations["GameLinkController_getProfile"];
  };
  "/api/game-link/stat": {
    /**
     * 통계 목록
     * @description 사용자의 누적 통계 값들을 얻습니다.
     */
    get: operations["GameLinkController_getStat"];
    /**
     * 통계 입력
     * @description 사용자의 대상 통계 값을 입력합니다.
     */
    put: operations["GameLinkController_putStat"];
  };
  "/api/game-link/stat-board": {
    /**
     * 전체 사용자 통계
     * @description 대상 통계의 전체 사용자 값을 조회합니다.
     */
    get: operations["GameLinkController_getStatBoard"];
  };
  "/api/oauth": {
    /**
     * OAuth 설정 조회
     * @description 해당 게임의 OAuth 연동에 필요한 값들을 조회합니다.
     */
    get: operations["OAuthController_getOAuth"];
  };
  "/api/oauth/{id}": {
    /**
     * OAuth 설정 수정
     * @description 해당 OAuth 설정 일부를 수정합니다.
     */
    put: operations["OAuthController_putOAuth"];
  };
  "/api/oauth/authorize": {
    /**
     * OAuth 인증
     * @description OAuth 인증을 수행합니다.
     */
    get: operations["OAuthController_authorize"];
  };
  "/api/oauth/token": {
    /**
     * OAuth 토큰 발급
     * @description OAuth 토큰을 발급합니다.
     */
    post: operations["OAuthController_getToken"];
  };
  "/api/oauth/refresh": {
    /**
     * OAuth 토큰 갱신
     * @description OAuth Refresh 토큰을 사용하여 OAuth 토큰을 갱신합니다.
     */
    get: operations["OAuthController_refreshToken"];
  };
}

interface components {
  schemas: {
    GetUserGameAchieveResItem: {
      /**
       * @description 도전과제 ID
       * @example happy_end
       */
      id: string;
      /**
       * @description 이름
       * @example 해피엔딩
       */
      name: string;
      /**
       * @description 설명
       * @example 해피엔딩 보기.
       */
      desc: string;
      /**
       * @description 이미지 ID
       * @example abcd...
       */
      img: string;
      /**
       * @description 달성일(Epoch)
       * @example 1671021004000
       */
      regDate: number;
      /**
       * @description 연동된 통계 ID
       * @example minsu_clear
       */
      statId: string;
      /**
       * @description 연동된 통계 목푯값
       * @example 10
       */
      targetStatVal: number;
    };
    GetUserGameAchieveResDto: {
      /**
       * @description 항목 개수
       * @example 1
       */
      size: number;
      /** @description 항목들 */
      achieves: components["schemas"]["GetUserGameAchieveResItem"][];
    };
    SuccessDto: {
      /**
       * @description 성공 여부
       * @default true
       */
      success: Record<string, never>;
    };
    GetUserProfileResDto: {
      /**
       * @description 사용자 ID
       * @example 1
       */
      id: number;
      /**
       * @description 사용자 이름
       * @example 팬치
       */
      name: string;
      /**
       * @description 프로필 이미지 URL
       * @example https://phinf.pstatic.net/contact/20230203_106/.../image.png
       */
      profileImg: string;
    };
    GetUserGameStatLinkResItem: {
      /**
       * @description 통계 ID
       * @example minsu_clear
       */
      id: string;
      /**
       * @description 누적 통계 값
       * @example 700
       */
      val: number;
      /**
       * @description 최초 누적일(Epoch)
       * @example 1671021004000
       */
      regDate: number;
      /**
       * @description 마지막 누적일(Epoch)
       * @example 1671021004000
       */
      chgDate: number;
      /**
       * @description 이름
       * @example 민수 클리어 수
       */
      name: string;
      /**
       * @description 최댓값 (없으면 null)
       * @example 1000
       */
      max: number;
    };
    GetUserGameStatLinkResDto: {
      /**
       * @description 항목 개수
       * @example 1
       */
      size: number;
      /** @description 통계들 */
      stats: components["schemas"]["GetUserGameStatLinkResItem"][];
    };
    PutUserGameStatItem: {
      /**
       * @description 통계 ID
       * @example minsu_clear
       */
      id: string;
      /**
       * @description 통계 값
       * @example 7
       */
      val: number;
    };
    PutUserGameStatDto: {
      /** @description 입력할 통계들 */
      stats: components["schemas"]["PutUserGameStatItem"][];
    };
    PutUserGameStatResStat: {
      /**
       * @description 통계 ID
       * @example minsu_clear
       */
      id: string;
      /**
       * @description 통계 값
       * @example 700
       */
      val: number;
    };
    PutUserGameStatResDto: {
      /** @description 입력된 통계들 */
      stats: components["schemas"]["PutUserGameStatResStat"][];
      /** @description 새로 달성된 도전과제들 */
      achieves: components["schemas"]["GetUserGameAchieveResItem"][];
    };
    GetUserGameStatBoardResUser: {
      /**
       * @description 프로필 이미지 URL
       * @example https://phinf.pstatic.net/contact/20230203_106/.../image.png
       */
      img: string;
      /**
       * @description 사용자 ID
       * @example 1
       */
      id: number;
      /**
       * @description 사용자 이름
       * @example 팬치
       */
      name: string;
    };
    GetUserGameStatBoardResItem: {
      /** @description 사용자 */
      user: components["schemas"]["GetUserGameStatBoardResUser"];
      /**
       * @description 통계 값
       * @example 610
       */
      val: number;
    };
    GetUserGameStatBoardResStat: {
      /**
       * @description 이름
       * @example 민수 클리어 수
       */
      name: string;
      /**
       * @description 최댓값 (없으면 null)
       * @example 1000
       */
      max: number;
    };
    GetUserGameStatBoardResDto: {
      /**
       * @description 항목 개수
       * @example 1
       */
      size: number;
      /** @description 사용자 통계들 */
      board: components["schemas"]["GetUserGameStatBoardResItem"][];
      /** @description 대상 통계 */
      stat: components["schemas"]["GetUserGameStatBoardResStat"];
      /**
       * @description 현재 사용자 ID
       * @example 1
       */
      me: number;
    };
    GetOAuthResDto: {
      /**
       * @description 관리 ID
       * @example 1
       */
      id: number;
      /**
       * @description 클라이언트 ID
       * @example isol_dia
       */
      clientId: string;
      /**
       * @description 클라이언트 Secret
       * @example a1b2c3d...
       */
      clientSecret: string;
      /**
       * @description Callback URI
       * @example http://localhost:7610/callback
       */
      callbackUri: string;
    };
    GetAuthorizeResDto: {
      /**
       * @description 승인 코드
       * @example b5b4d5...
       */
      code: string;
      /**
       * @description CSRF 공격 방지 코드
       * @example hello
       */
      state: string;
      /**
       * @description Callback URI
       * @example http://localhost:7610/callback
       */
      callbackUri: string;
    };
    UpdateTokenResDto: {
      /**
       * @description 접근 토큰
       * @example g0sE123...
       */
      accessToken: string;
      /**
       * @description 갱신 토큰
       * @example j1nGb32...
       */
      refreshToken: string;
      /**
       * @description 식별 토큰
       * @example 1
       */
      idToken: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

interface operations {

  /**
   * 도전과제 달성 목록
   * @description 사용자가 달성한 게임 도전과제 목록을 얻습니다.
   */
  GameLinkController_getAchieves: {
    responses: {
      /** @description 조회 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserGameAchieveResDto"];
        };
      };
    };
  };
  /**
   * 도전과제 달성
   * @description 사용자가 게임의 해당 도전과제를 달성했다고 기록합니다.
   */
  GameLinkController_postAchieve: {
    parameters: {
      query: {
        /**
         * @description 도전과제 ID
         * @example happy_end
         */
        id: string;
      };
    };
    responses: {
      /** @description 기록 성공시. */
      201: {
        content: {
          "application/json": components["schemas"]["SuccessDto"];
        };
      };
      /** @description 해당 도전과제를 찾을 수 없을 경우. */
      404: {
        content: never;
      };
      /** @description 이미 달성된 도전과제일 경우. */
      409: {
        content: never;
      };
    };
  };
  /**
   * 사용자 프로필 정보
   * @description 연동된 게임에서 사용자 기본 정보를 얻습니다.
   */
  GameLinkController_getProfile: {
    responses: {
      /** @description 조회 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserProfileResDto"];
        };
      };
    };
  };
  /**
   * 통계 목록
   * @description 사용자의 누적 통계 값들을 얻습니다.
   */
  GameLinkController_getStat: {
    parameters: {
      query?: {
        /**
         * @description 통계 ID (없으면 전체 조회)
         * @example minsu_clear
         */
        id?: string;
      };
    };
    responses: {
      /** @description 조회 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserGameStatLinkResDto"];
        };
      };
    };
  };
  /**
   * 통계 입력
   * @description 사용자의 대상 통계 값을 입력합니다.
   */
  GameLinkController_putStat: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PutUserGameStatDto"];
      };
    };
    responses: {
      /** @description 입력 결과. */
      200: {
        content: {
          "application/json": components["schemas"]["PutUserGameStatResDto"];
        };
      };
    };
  };
  /**
   * 전체 사용자 통계
   * @description 대상 통계의 전체 사용자 값을 조회합니다.
   */
  GameLinkController_getStatBoard: {
    parameters: {
      query: {
        /**
         * @description 통계 ID
         * @example minsu_clear
         */
        id: string;
      };
    };
    responses: {
      /** @description 조회 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserGameStatBoardResDto"];
        };
      };
      /** @description 통계를 조회할 권한이 없는 경우. */
      403: {
        content: never;
      };
      /** @description 해당 통계를 찾을 수 없을 경우. */
      404: {
        content: never;
      };
    };
  };
  /**
   * OAuth 설정 조회
   * @description 해당 게임의 OAuth 연동에 필요한 값들을 조회합니다.
   */
  OAuthController_getOAuth: {
    parameters: {
      query: {
        /**
         * @description 게임 ID
         * @example isol_dia
         */
        game: string;
      };
    };
    responses: {
      /** @description 조회 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["GetOAuthResDto"];
        };
      };
    };
  };
  /**
   * OAuth 설정 수정
   * @description 해당 OAuth 설정 일부를 수정합니다.
   */
  OAuthController_putOAuth: {
    parameters: {
      query: {
        /**
         * @description Callback URI
         * @example http://localhost:7610/callback
         */
        callback: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 수정 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessDto"];
        };
      };
    };
  };
  /**
   * OAuth 인증
   * @description OAuth 인증을 수행합니다.
   */
  OAuthController_authorize: {
    parameters: {
      query: {
        /**
         * @description OAuth 종류
         * @example code
         */
        responseType: "code";
        /**
         * @description 클라이언트 ID
         * @example isol_dia
         */
        clientId: string;
        /**
         * @description CSRF 공격 방지 코드
         * @example hello
         */
        state: string;
        /**
         * @description Callback URI
         * @example http://localhost:7610/callback
         */
        callbackUri: string;
        /**
         * @description 챌린지 종류
         * @example S256
         */
        challengeMethod: "S256";
        /**
         * @description 챌린지 코드
         * @example ab12c3d4...
         */
        challenge: string;
      };
    };
    responses: {
      /** @description 인증 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["GetAuthorizeResDto"];
        };
      };
    };
  };
  /**
   * OAuth 토큰 발급
   * @description OAuth 토큰을 발급합니다.
   */
  OAuthController_getToken: {
    parameters: {
      query: {
        /**
         * @description OAuth 종류
         * @example authorization_code
         */
        grantType: "authorization_code";
        /**
         * @description 클라이언트 ID
         * @example isol_dia
         */
        clientId: string;
        /**
         * @description 승인 코드
         * @example b5b4d5...
         */
        code: string;
        /**
         * @description 챌린지 검증 코드
         * @example li1Pa700...
         */
        verifier: string;
        /**
         * @description Callback URI
         * @example http://localhost:7610/callback
         */
        callbackUri: string;
      };
    };
    responses: {
      /** @description 발급 성공시. */
      201: {
        content: {
          "application/json": components["schemas"]["UpdateTokenResDto"];
        };
      };
    };
  };
  /**
   * OAuth 토큰 갱신
   * @description OAuth Refresh 토큰을 사용하여 OAuth 토큰을 갱신합니다.
   */
  OAuthController_refreshToken: {
    responses: {
      /** @description 갱신 성공시. */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateTokenResDto"];
        };
      };
    };
  };
}

declare function createRequestInstance(baseURL: string): ReturnType<typeof createClient<paths>>;
type RequestInstance = ReturnType<typeof createRequestInstance>;

interface IAuthorizeUrl {
    csrfState: string;
    codeVerifier: string;
    codeChallenge: string;
    url: string;
}

/**
 * OAuth API
 * @description 로그인과 관련된 API 기능을 제공합니다.
 */
declare const oauth: (_request: RequestInstance, _host: string, clientId: string, redirectUrl: string) => {
    getAuthorizeUrl: () => IAuthorizeUrl;
    token: (query: paths["/api/oauth/token"]["post"]["parameters"]["query"]) => ReturnType<typeof _request.POST>;
    refresh: (token: string) => ReturnType<typeof _request.GET>;
};

/**
 * 게임 연동 API
 *
 * @description 게임 연동과 관련된 API 기능을 제공합니다.
 */
declare const gameLink: (_request: RequestInstance) => {
    getProfile: (Authorization: string) => ReturnType<typeof _request.GET>;
    getAchieves: (Authorization: string) => ReturnType<typeof _request.GET>;
    postAchieve: (query: paths["/api/game-link/achieve"]["post"]["parameters"]["query"], Authorization: string) => ReturnType<typeof _request.POST>;
    getStat: (query: paths["/api/game-link/stat"]["get"]["parameters"]["query"], Authorization: string) => ReturnType<typeof _request.GET>;
    putStat: (body: paths["/api/game-link/stat"]["put"]["requestBody"]["content"]["application/json"], Authorization: string) => ReturnType<typeof _request.PUT>;
    getStatBoard: (query: paths["/api/game-link/stat-board"]["get"]["parameters"]["query"], Authorization: string) => ReturnType<typeof _request.GET>;
};

/**
 * Waktaverse Games - Backend SDK Class.
 *
 * @param {string} host - Host URL.
 * @default host = "https://waktaverse.games"
 *
 * @example
 * const wakgames = new WakGames({
 *  clientId: 'wakttu',
 *  redirectUrl: 'https://example.com/callback',
 * })
 */
declare class WakGames {
    host: string;
    clientId: string;
    redirectUrl: string;
    oauth: ReturnType<typeof oauth>;
    gameLink: ReturnType<typeof gameLink>;
    private _request;
    constructor(options: {
        host?: string;
        clientId: string;
        redirectUrl: string;
    });
    private _init;
}

export { WakGames };
