{"version":3,"sources":["../src/common/constants.ts","../src/common/request.ts","../src/common/utils/random.ts","../src/common/utils/sha.ts","../src/lib/oauth.ts","../src/lib/game-link.ts","../src/index.ts"],"names":["DEFAULT_HOST","createClient","createRequestInstance","baseURL","request_default","CHARS","pool","poolOffset","random","bytes","createRandomKey","size","mask","step","id","i","createHash","generateCodeChallenge","codeVerifier","oauth","_request","_host","clientId","redirectUrl","csrfState","codeChallenge","queryParams","query","token","gameLink","Authorization","body","WakGames","options"],"mappings":"AAAO,IAAMA,EAAe,2BCA5B,OAAOC,MAAkB,gBAGlB,SAASC,EACdC,EACwC,CACxC,OAAOF,EAAoB,CAAC,QAASE,CAAO,CAAC,CAC/C,CAIA,IAAOC,EAAQF,ECRf,IAAMG,EAAQ,sCAEVC,EAAcC,EAElB,SAASC,EAAOC,EAAe,CAC7B,MAAI,CAACH,GAAQA,EAAK,OAASG,GACzBH,EAAO,OAAO,YAAYG,EAAQ,GAAG,EACrC,OAAO,gBAAgBH,CAAI,EAC3BC,EAAa,GACJA,EAAaE,EAAQH,EAAK,SACnC,OAAO,gBAAgBA,CAAI,EAC3BC,EAAa,GAEfA,GAAcE,EAEPH,EAAK,SAASC,EAAaE,EAAOF,CAAU,CACrD,CAEO,SAASG,EAAgBC,EAAO,GAAI,CACzC,IAAMC,GAAQ,GAAM,GAAK,KAAK,MAAOP,EAAM,OAAS,EAAK,CAAC,GAAM,EAC1DQ,EAAO,KAAK,KAAM,IAAMD,EAAOD,EAAQN,EAAM,MAAM,EAErDS,EAAK,GAGT,OAAa,CACX,IAAML,EAAQD,EAAOK,CAAI,EACrBE,EAAIF,EAER,KAAOE,KAEL,GADAD,GAAMT,EAAMI,EAAMM,CAAC,EAAKH,CAAI,GAAK,GAC7BE,EAAG,SAAWH,EAAM,OAAOG,CAEnC,CACF,CCrCA,OAAQ,cAAAE,MAAiB,SAElB,SAASC,EAAsBC,EAA8B,CAClE,OAAOF,EAAW,QAAQ,EACvB,OAAO,OAAO,KAAKE,EAAc,MAAM,CAAC,EACxC,OAAO,EACP,SAAS,QAAQ,EACjB,QAAQ,MAAO,GAAG,EAClB,QAAQ,MAAO,GAAG,EAClB,QAAQ,MAAO,EAAE,CACtB,CCEO,IAAMC,EAAQ,CACnBC,EACAC,EACAC,EACAC,KAUO,CAKL,gBAAiB,IAAM,CACrB,IAAMC,EAAYd,EAAgB,EAAE,EAC9BQ,EAAeR,EAAgB,GAAG,EAClCe,EAAgBR,EAAsBC,CAAY,EAElDQ,EACJ,CACE,aAAc,OACd,SAAAJ,EACA,YAAaC,EACb,MAAOC,EACP,gBAAiB,OACjB,UAAWC,CACb,EAEF,MAAO,CACL,UAAAD,EACA,aAAAN,EACA,cAAAO,EACA,IAAK,GAAGJ,CAAK,oBAAoB,IAAI,gBACnCK,CACF,EAAE,SAAS,CAAC,EACd,CACF,EAMA,MACEC,GAEOP,EAAS,KAAK,mBAAoB,CAAC,OAAQ,CAAC,MAAAO,CAAK,CAAC,CAAC,EAS5D,QAAUC,GACDR,EAAS,IAAI,qBAAsB,CACxC,QAAS,CACP,cAAe,UAAUQ,CAAK,EAChC,CACF,CAAC,CAEL,GCvEK,IAAMC,EACXT,IAyBO,CAOL,WAAaU,GACJV,EAAS,IAAI,8BAA+B,CACjD,QAAS,CACP,cAAe,UAAUU,CAAa,EACxC,CACF,CAAC,EAOH,YAAcA,GACLV,EAAS,IAAI,yBAA0B,CAC5C,QAAS,CACP,cAAe,UAAUU,CAAa,EACxC,CACF,CAAC,EAOH,YAAa,CACXH,EACAG,IAEOV,EAAS,KAAK,yBAA0B,CAC7C,OAAQ,CAAC,MAAAO,CAAK,EACd,QAAS,CACP,cAAe,UAAUG,CAAa,EACxC,CACF,CAAC,EAOH,QAAS,CACPH,EACAG,IAEOV,EAAS,IAAI,sBAAuB,CACzC,OAAQ,CAAC,MAAAO,CAAK,EACd,QAAS,CACP,cAAe,UAAUG,CAAa,EACxC,CACF,CAAC,EAOH,QAAS,CACPC,EACAD,IAEOV,EAAS,IAAI,sBAAuB,CACzC,KAAAW,EACA,QAAS,CACP,cAAe,UAAUD,CAAa,EACxC,CACF,CAAC,EAOH,aAAc,CACZH,EACAG,IAEOV,EAAS,IAAI,4BAA6B,CAC/C,OAAQ,CAAC,MAAAO,CAAK,EACd,QAAS,CACP,cAAe,UAAUG,CAAa,EACxC,CACF,CAAC,CAEL,GCzGK,IAAME,EAAN,KAAe,CASpB,YAAYC,EAAiE,CAC3E,KAAK,KAAOA,EAAQ,MAAQjC,EAC5B,KAAK,SAAWiC,EAAQ,SACxB,KAAK,YAAcA,EAAQ,YAC3B,KAAK,SAAW7B,EAAsB,KAAK,IAAI,EAE/C,KAAK,MAAM,CACb,CAEQ,OAAQ,CAEd,KAAK,MAAQe,EACX,KAAK,SACL,KAAK,KACL,KAAK,SACL,KAAK,WACP,EAEA,KAAK,SAAWU,EAAS,KAAK,QAAQ,CACxC,CACF","sourcesContent":["export const DEFAULT_HOST = 'https://waktaverse.games';\n","import createClient from 'openapi-fetch';\nimport type {paths} from '../types/api'; // generated by openapi-typescript\n\nexport function createRequestInstance(\n  baseURL: string\n): ReturnType<typeof createClient<paths>> {\n  return createClient<paths>({baseUrl: baseURL});\n}\n\nexport type RequestInstance = ReturnType<typeof createRequestInstance>;\n\nexport default createRequestInstance;\n","// Original source: https://github.com/ai/nanoid/blob/main/index.js\n// License: MIT, Modification/Distribution is allowed\n\nconst CHARS = 'abcdefghijklmnopqrstuvwxyz123456789';\n\nlet pool: Buffer, poolOffset: number;\n\nfunction random(bytes: number) {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * 128);\n    crypto.getRandomValues(pool);\n    poolOffset = 0;\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.getRandomValues(pool);\n    poolOffset = 0;\n  }\n  poolOffset += bytes;\n\n  return pool.subarray(poolOffset - bytes, poolOffset);\n}\n\nexport function createRandomKey(size = 16) {\n  const mask = (2 << (31 - Math.clz32((CHARS.length - 1) | 1))) - 1;\n  const step = Math.ceil((1.6 * mask * size) / CHARS.length);\n\n  let id = '';\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const bytes = random(step);\n    let i = step;\n\n    while (i--) {\n      id += CHARS[bytes[i]! & mask] || '';\n      if (id.length === size) return id;\n    }\n  }\n}\n","import {createHash} from 'crypto';\n\nexport function generateCodeChallenge(codeVerifier: string): string {\n  return createHash('sha256')\n    .update(Buffer.from(codeVerifier, 'utf8'))\n    .digest()\n    .toString('base64')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '');\n}\n","import type {RequestInstance} from '../common/request';\n\nimport {createRandomKey} from '../common/utils/random';\nimport {generateCodeChallenge} from '../common/utils/sha';\nimport {IAuthorizeUrl} from '../types/authorize';\n\nimport type {paths} from '../types/api'; // generated by openapi-typescript\n\n/**\n * OAuth API\n * @description 로그인과 관련된 API 기능을 제공합니다.\n */\nexport const oauth = (\n  _request: RequestInstance,\n  _host: string,\n  clientId: string,\n  redirectUrl: string\n): {\n  getAuthorizeUrl: () => IAuthorizeUrl;\n\n  token: (\n    query: paths['/api/oauth/token']['post']['parameters']['query']\n  ) => ReturnType<typeof _request.POST>;\n\n  refresh: (token: string) => ReturnType<typeof _request.GET>;\n} => {\n  return {\n    /**\n     * OAuth 인증\n     * @description OAuth 인증을 수행합니다.\n     */\n    getAuthorizeUrl: () => {\n      const csrfState = createRandomKey(16);\n      const codeVerifier = createRandomKey(128);\n      const codeChallenge = generateCodeChallenge(codeVerifier);\n\n      const queryParams: paths['/api/oauth/authorize']['get']['parameters']['query'] =\n        {\n          responseType: 'code',\n          clientId,\n          callbackUri: redirectUrl,\n          state: csrfState,\n          challengeMethod: 'S256',\n          challenge: codeChallenge,\n        };\n\n      return {\n        csrfState,\n        codeVerifier,\n        codeChallenge,\n        url: `${_host}/oauth/authorize?${new URLSearchParams(\n          queryParams\n        ).toString()}`,\n      } as IAuthorizeUrl;\n    },\n\n    /**\n     * OAuth 토큰 발급\n     * @description OAuth 토큰을 발급합니다.\n     */\n    token: (\n      query: paths['/api/oauth/token']['post']['parameters']['query']\n    ) => {\n      return _request.POST('/api/oauth/token', {params: {query}});\n    },\n\n    /**\n     * OAuth 토큰 갱신\n     * @description OAuth Refresh 토큰을 사용하여 OAuth 토큰을 갱신합니다.\n     *\n     * @param {string} token - JWT Refresh 토큰 값입니다. 이미 Bearer가 Prefix로 붙어있어, 토큰값을 바로 넣으시면 됩니다.\n     */\n    refresh: (token: string) => {\n      return _request.GET('/api/oauth/refresh', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {paths} from '../types/api'; // generated by openapi-typescript\n\n/**\n * 게임 연동 API\n *\n * @description 게임 연동과 관련된 API 기능을 제공합니다.\n */\nexport const gameLink = (\n  _request: RequestInstance\n): {\n  getProfile: (Authorization: string) => ReturnType<typeof _request.GET>;\n  getAchieves: (Authorization: string) => ReturnType<typeof _request.GET>;\n\n  postAchieve: (\n    query: paths['/api/game-link/achieve']['post']['parameters']['query'],\n    Authorization: string\n  ) => ReturnType<typeof _request.POST>;\n\n  getStat: (\n    query: paths['/api/game-link/stat']['get']['parameters']['query'],\n    Authorization: string\n  ) => ReturnType<typeof _request.GET>;\n\n  putStat: (\n    body: paths['/api/game-link/stat']['put']['requestBody']['content']['application/json'],\n    Authorization: string\n  ) => ReturnType<typeof _request.PUT>;\n\n  getStatBoard: (\n    query: paths['/api/game-link/stat-board']['get']['parameters']['query'],\n    Authorization: string\n  ) => ReturnType<typeof _request.GET>;\n} => {\n  return {\n    /**\n     * 사용자 프로필 정보\n     * @description 연동된 게임에서 사용자 기본 정보를 얻습니다.\n     *\n     * @param {string} Authorization - JWT Refresh 토큰 값입니다. 이미 Bearer가 Prefix로 붙어있어, 토큰값을 바로 넣으시면 됩니다.\n     */\n    getProfile: (Authorization: string) => {\n      return _request.GET('/api/game-link/user/profile', {\n        headers: {\n          Authorization: `Bearer ${Authorization}`,\n        },\n      });\n    },\n\n    /**\n     * 도전과제 달성 목록\n     * @description 사용자가 달성한 게임 도전과제 목록을 얻습니다.\n     */\n    getAchieves: (Authorization: string) => {\n      return _request.GET('/api/game-link/achieve', {\n        headers: {\n          Authorization: `Bearer ${Authorization}`,\n        },\n      });\n    },\n\n    /**\n     * 도전과제 달성\n     * @description 사용자가 게임의 해당 도전과제를 달성했다고 기록합니다.\n     */\n    postAchieve: (\n      query: paths['/api/game-link/achieve']['post']['parameters']['query'],\n      Authorization: string\n    ) => {\n      return _request.POST('/api/game-link/achieve', {\n        params: {query},\n        headers: {\n          Authorization: `Bearer ${Authorization}`,\n        },\n      });\n    },\n\n    /**\n     * 통계 목록\n     * @description 사용자의 누적 통계 값들을 얻습니다.\n     */\n    getStat: (\n      query: paths['/api/game-link/stat']['get']['parameters']['query'],\n      Authorization: string\n    ) => {\n      return _request.GET('/api/game-link/stat', {\n        params: {query},\n        headers: {\n          Authorization: `Bearer ${Authorization}`,\n        },\n      });\n    },\n\n    /**\n     * 통계 입력\n     * @description 사용자의 대상 통계 값을 입력합니다.\n     */\n    putStat: (\n      body: paths['/api/game-link/stat']['put']['requestBody']['content']['application/json'],\n      Authorization: string\n    ) => {\n      return _request.PUT('/api/game-link/stat', {\n        body,\n        headers: {\n          Authorization: `Bearer ${Authorization}`,\n        },\n      });\n    },\n\n    /**\n     * 전체 사용자 통계\n     * @description 대상 통계의 전체 사용자 값을 조회합니다.\n     */\n    getStatBoard: (\n      query: paths['/api/game-link/stat-board']['get']['parameters']['query'],\n      Authorization: string\n    ) => {\n      return _request.GET('/api/game-link/stat-board', {\n        params: {query},\n        headers: {\n          Authorization: `Bearer ${Authorization}`,\n        },\n      });\n    },\n  };\n};\n","import {DEFAULT_HOST} from './common/constants';\nimport createRequestInstance, {type RequestInstance} from './common/request';\n\n// Import all API functions\nimport {oauth} from './lib/oauth'; // OAuth 관련 API\nimport {gameLink} from './lib/game-link'; // 게임 연동 관련 API\n\n/**\n * Waktaverse Games - Backend SDK Class.\n *\n * @param {string} host - Host URL.\n * @default host = \"https://waktaverse.games\"\n *\n * @example\n * const wakgames = new WakGames({\n *  clientId: 'wakttu',\n *  redirectUrl: 'https://example.com/callback',\n * })\n */\nexport class WakGames {\n  host: string;\n  clientId: string;\n  redirectUrl: string;\n\n  public declare oauth: ReturnType<typeof oauth>;\n  public declare gameLink: ReturnType<typeof gameLink>;\n  private declare _request: RequestInstance;\n\n  constructor(options: {host?: string; clientId: string; redirectUrl: string}) {\n    this.host = options.host || DEFAULT_HOST;\n    this.clientId = options.clientId;\n    this.redirectUrl = options.redirectUrl;\n    this._request = createRequestInstance(this.host);\n\n    this._init();\n  }\n\n  private _init() {\n    // init all API functions\n    this.oauth = oauth(\n      this._request,\n      this.host,\n      this.clientId,\n      this.redirectUrl\n    );\n\n    this.gameLink = gameLink(this._request);\n  }\n}\n"]}